from __future__ import print_function, division
import os

from numpy import ptp, array

from .const import *


def save_figure(name, loc, fig, file_extensions=('pdf', 'eps', 'png')):
    """
    Saves figure to location given by rootloc/<ext>/<name>.<ext>
    """

    for ext in file_extensions:
        extloc = os.path.join(loc, ext)
        if not os.path.exists(extloc):
            os.makedirs(extloc)

        aname = name + '.' + ext
        saveloc = os.path.join(extloc, aname)
        fig.savefig(saveloc)


def _to_cube(axis, anum=1):
    axis.set_xlim(-anum, anum)
    axis.set_ylim(-anum, anum)
    axis.set_zlim(-anum, anum)


def labelaxes(axis, defaultunit=mm):
    axis.set_xticklabels(axis.get_xticks() / defaultunit)
    axis.set_yticklabels(axis.get_yticks() / defaultunit)
    axis.set_zticklabels(axis.get_zticks() / defaultunit)

    axis.set_xlabel("x (mm)")
    axis.set_ylabel("y (mm)")
    axis.set_zlabel("z (mm)")


def plot_time(axis, df, **kwargs):
    """
    Histogram of arrival time data weighted by photon energy

    axis : matplotlib subplot axis
    df : pandas DataFrame generated by pylightbox

    kwargs
    time_range : (min, max) in ps
    xlabel, ylabel : x and y label of axis
    dt : : bin width
    verbose : verbosity control
    """
    time_range = kwargs.pop('time_range', (0, 400))
    xlabel = kwargs.pop("xlabel", "time (ps)")
    ylabel = kwargs.pop("ylabel", "Energy Density")
    dt = kwargs.pop('dt', 1)
    verbose = kwargs.pop('verbose', 0)
    bins = ptp(time_range) / dt

    if verbose > 0:
        energy_in_plot = df[(df.time > min(time_range)) & (df.time < max(time_range))].energy.sum()
        print("Total energy in plot is {:2.1f} %".format(energy_in_plot * 1e2))
        #print("Energy in plot is :",sum(df.energy)*1e2,"%")

    axis.hist(array(df.time), range=time_range, bins=bins,
              weights=array(df.energy), **kwargs)

    axis.set_xlim(time_range)
    axis.set_xlabel(xlabel)
    axis.set_ylabel(ylabel)


def plot_angle(axis, df, **kwargs):
    """
    Histogram of photon angles with respect to their final surface normal
    """
    Degrees = pi/180
    number_of_bins = kwargs.pop('bins', 91)
    axis.hist(df.angle / Degrees, range=(0, 90), bins=number_of_bins, weights=df.energy, **kwargs)
    axis.set_xlabel("Angle (Degrees)")
    axis.set_ylabel("frequency")
